!pip install reportlab
import pandas as pd
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.lib import colors

def generate_report(input_csv_file, output_pdf_file, title="Automated Data Report"):
    """
    Reads data from a CSV, analyzes it, and generates a formatted PDF report.

    Args:
        input_csv_file (str): Path to the input CSV file.
        output_pdf_file (str): Path where the PDF report will be saved.
        title (str): Title of the report.
    """
    try:
        
        df = pd.read_csv(input_csv_file)
        print(f"Data successfully loaded from {input_csv_file}")
        print(df.head())

        
        if 'Value' in df.columns and pd.api.types.is_numeric_dtype(df['Value']):
            total_value = df['Value'].sum()
            average_value = df['Value'].mean()
            num_records = len(df)
            analysis_summary = (
                f"Analysis Summary:\n\n"
                f"Total Records: {num_records}\n"
                f"Sum of 'Value': {total_value:.2f}\n"
                f"Average 'Value': {average_value:.2f}\n"
            )
            print("Data analysis complete.")
        else:
            analysis_summary = "No numeric 'Value' column found for analysis, or data is not numeric."
            print("Skipping detailed numerical analysis due to missing or non-numeric 'Value' column.")

        
        doc = SimpleDocTemplate(output_pdf_file, pagesize=letter)
        styles = getSampleStyleSheet()
        story = []

        
        story.append(Paragraph(title, styles['h1']))
        story.append(Spacer(1, 0.2 * 1.5 * 10)) # Adjust space

        
        story.append(Paragraph("<b><u>Data Analysis Overview</u></b>", styles['h2']))
        story.append(Spacer(1, 0.2 * 10))
        for line in analysis_summary.split('\n'):
            if line.strip(): # Avoid adding empty paragraphs
                story.append(Paragraph(line, styles['Normal']))
        story.append(Spacer(1, 0.4 * 10))

        
        story.append(Paragraph("<b><u>Raw Data Sample (First 10 Rows)</u></b>", styles['h2']))
        story.append(Spacer(1, 0.2 * 10))

        
        data_to_display = [df.columns.tolist()] + df.head(10).values.tolist()
        table = Table(data_to_display)

        
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(table)
        story.append(Spacer(1, 0.4 * 10))
        story.append(Paragraph("<i>Report generated on " + pd.Timestamp.now().strftime("%Y-%m-%d %H:%M:%S") + "</i>", styles['Italic']))


        doc.build(story)
        print(f"Report successfully generated at {output_pdf_file}")

    except FileNotFoundError:
        print(f"Error: The file '{input_csv_file}' was not found.")
    except KeyError as e:
        print(f"Error: Missing expected column in CSV: {e}. Please check your data.")
    except Exception as e:
        print(f"An unexpected error occurred: {e}")

if __name__ == "__main__":
    
    dummy_data = {
        'ID': range(1, 21),
        'Product': [f'Product_{i}' for i in range(1, 21)],
        'Value': [i * 10 + (i % 5) * 2 for i in range(1, 21)],
        'Category': ['A', 'B', 'C', 'A', 'B'] * 4
    }
    dummy_df = pd.DataFrame(dummy_data)
    dummy_csv_path = 'sample_data.csv'
    dummy_df.to_csv(dummy_csv_path, index=False)
    print(f"Dummy CSV created at {dummy_csv_path}")

    
    input_file = 'sample_data.csv'
    output_file = 'data_report.pdf'
    report_title = "Monthly Sales Performance Report"

    
    generate_report(input_file, output_file, report_title)
